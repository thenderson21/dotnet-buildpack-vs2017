#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

if [ $STACK != "cedar-14" ]; then
	echo "Stack ${STACK} not supported" && exit 1
fi

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
# This is where the buildpack is stored
BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`

source $BUILDPACK_DIR/bin/util

export_env_dir ${ENV_DIR}

: ${LIBUV_VERSION:="1.11.0"}
: ${NODEJS_VERSION:="6.9.5"}
: ${DOTNET_SDK_VERSION:="1.0.0-rc4-004771"}
: ${DOTNET_RUNTIME_VERSION:="1.1.0"}
: ${LIBUNWIND_VERSION:="1.1-4.1"}

export NUGET_XMLDOC_MODE=skip
export DOTNET_CLI_TELEMETRY_OPTOUT=1
export DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1

SRC_DIR=`mktemp -d`/app
mkdir -p ${SRC_DIR}
# Move the app source code into temporary src dir using subshell to not leak shopt
(
	shopt -s dotglob
	mv ${BUILD_DIR}/* ${SRC_DIR}
)

mkdir -p ${BUILD_DIR}/.profile.d
mkdir -p ${CACHE_DIR}


# Get Dotnet Core
DOTNET_CACHE_LOCATION=${CACHE_DIR}/dotnet/${DOTNET_SDK_VERSION}
if [ ! -d ${DOTNET_CACHE_LOCATION} ]; then
	rm -rf ${CACHE_DIR}/dotnet/* || true
	mkdir -p ${DOTNET_CACHE_LOCATION}/{sdk,runtime}

	echo "Downloading .NET SDK version ${DOTNET_SDK_VERSION} and runtime version ${DOTNET_RUNTIME_VERSION}"
	curl -OSL https://dot.net/v1/dotnet-install.sh
	chmod +x dotnet-install.sh 
	./dotnet-install.sh --install-dir ${DOTNET_CACHE_LOCATION}
fi
export PATH="${DOTNET_CACHE_LOCATION}/sdk:$PATH"
cp -r ${DOTNET_CACHE_LOCATION}/dotnet ${BUILD_DIR}/dotnet
cat <<EOF >$BUILD_DIR/.profile.d/000_dotnet.sh
export PATH="\$HOME/dotnet:\$PATH"
EOF


# Build the project
DEPLOYMENT_FILE_LOCATION=${SRC_DIR}/.deployment
if [ -n "$PROJECT" ]; then
	PROJECT_FILE=${SRC_DIR}/${PROJECT}
	echo "Project file configured in PROJECT environment variable"
elif [ -e ${DEPLOYMENT_FILE_LOCATION} ]; then
	PROJECT_NAME=$(awk -F "=" '/project/ {print $2}' ${DEPLOYMENT_FILE_LOCATION} | tr -d ' ')
	PROJECT_FILE=${SRC_DIR}/${PROJECT_NAME}
	echo "Project file configured in .deployment file: ${PROJECT_FILE}"
	echo "Project name configured in .deployment file: ${PROJECT_NAME}"
else
	
	S=$(find ${SRC_DIR}/. -maxdepth 3 -iname *.csproj)
	printf 'Found %s csproj files\n' $(echo "$PROJECT_FILES" | wc -l | tr -d ' ')
	PROJECT_FILE=$(echo "$PROJECT_FILES" | head -1)
fi
echo "Building ${PROJECT_FILE}"

export NUGET_PACKAGES="${CACHE_DIR}/nuget/cache"

echo "dotnet restore ${PROJECT_FILE}"
dotnet restore --runtime ubuntu.14.04-x64 ${PROJECT_FILE}

echo "dotnet publish ${PROJECT_FILE} --output ${BUILD_DIR}"
dotnet publish ${PROJECT_FILE} --output ${BUILD_DIR} --runtime ubuntu.14.04-x64 --configuration Release

# Get libuv
LIBUV_CACHE_LOCATION=${CACHE_DIR}/libuv/${LIBUV_VERSION}
if [ ! -d ${LIBUV_CACHE_LOCATION} ]; then
	rm -rf ${CACHE_DIR}/libuv/* || true
	mkdir -p ${LIBUV_CACHE_LOCATION}

	echo "Downloading libuv version ${LIBUV_VERSION}"
	curl https://github.com/friism/libuv-builder/releases/download/v${LIBUV_VERSION}/libuv-${LIBUV_VERSION}.tar.gz -sSL \
	 | tar xz -C ${LIBUV_CACHE_LOCATION}
fi
cp -r ${LIBUV_CACHE_LOCATION}/libuv ${BUILD_DIR}
cat <<EOF >$BUILD_DIR/.profile.d/000_libuv.sh
export LD_LIBRARY_PATH="\$HOME/libuv/lib:\$LD_LIBRARY_PATH"
EOF

if [ -e ${SRC_DIR}/Procfile ]; then
	cp ${SRC_DIR}/Procfile ${BUILD_DIR}
else
	cat << EOT >> ${BUILD_DIR}/Procfile
echo "dotnet $PORT"
web: dotnet ${PROJECT_NAME}.dll http://0.0.0.0:\$PORT
EOT
fi
